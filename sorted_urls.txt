companies
companies/[community_name]/employees
companies/[community_name]/products/[product_name]/topics
companies/[community_name]/tags/[tag]/topics
companies/[community_name]/topics
companies/[community_name]/topics/[topic ID]
companies/[community_name]/people

people
people?filter=[variable]
people?page=3&limit=10
people?query=[query_string]
people/[user ID]/products
people/[user ID]/followed/topics
people/[user ID]/replies
people/[user ID]/topics
people/[user name or ID]/companies

products
products?page=3&limit=10
products/[product name]/companies
products/[product name]/topics
products?query=macbook
products?sort=alpha
products?sort=least_popular
products?sort=most_popular
products?sort=recently_created

replies
replies/[reply ID or slug]/comments

tags
tags?page=3&limit=10

topics
topics/[topic slug or id]
topics/[topic ID or slug]/people
topics/[topic ID or slug]/products
topics/[topic ID or slug]/comments
topics/[topic ID or slug]/replies


- set up a set of objects representing the API in __enter__. It's allowed to have state
  as it is played with, but will only exist inside the with block

gs = GetSatisfaction(<auth>)
with gs.api_call() as a:
    companies = a.companies()

with gs.api() as api:
    cos = api.companies()
    topics = api.companies('funfun').topics()
    topic = api.companies('funfun').topics('how_to_have_fun').get()
    people = api.people('id').topics()

- gs holds unchanging state: auth, defaults
- gs.api_call() produces a representation of the API that can be traversed and
  customized and called to return objects

gs = GetSatisfaction()
with gs.api() as a:
    fun = a.companies.filter('funfun')
    fun.topics.all(sort='recently_created')

